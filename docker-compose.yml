version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vibelytube-db
    environment:
      POSTGRES_USER: ${DATABASE_USER:-vibelytube}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password123}
      POSTGRES_DB: ${DATABASE_NAME:-vibelytube}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-vibelytube}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vibelytube-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vibelytube-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - vibelytube-network

  # VibelyTube Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vibelytube-app
    environment:
      # Database
      DATABASE_URL: postgresql://${DATABASE_USER:-vibelytube}:${DATABASE_PASSWORD:-password123}@postgres:5432/${DATABASE_NAME:-vibelytube}
      
      # Redis
      REDIS_URL: redis://default:${REDIS_PASSWORD:-redis123}@redis:6379
      
      # Application
      NODE_ENV: production
      PORT: 3000
      FRONTEND_PORT: 5173
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # YouTube
      YOUTUBE_API_KEY: ${YOUTUBE_API_KEY}
      
      # Authentication
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:5173,https://vibelytube.com}
    volumes:
      - uploads_data:/app/backend/uploads
      - ./logs:/app/logs
    ports:
      - "${APP_PORT:-3000}:3000"
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - vibelytube-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vibelytube-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - vibelytube-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vibelytube-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - vibelytube-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: vibelytube-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - vibelytube-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vibelytube-network:
    driver: bridge